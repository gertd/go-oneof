//
// Code generated by gogen-enum DO NOT EDIT.
//
package business

import (
	"bytes"
	"encoding/json"
)

// AddressKind -- enum type
type AddressKind int

// AddressKind -- enum constants
const (
	AddressKindUnknown AddressKind = 0 + iota
	AddressKindHome
	AddressKindOffice
	AddressKindPostalBox
)

// addressKind -- enum string representation constants
const (
	addressKindUnknown   = "Unknown"
	addressKindHome      = "Home"
	addressKindOffice    = "Office"
	addressKindPostalBox = "PostalBox"
)

// AddressKindID -- map enum constant to string
var addressKindID = map[AddressKind]string{
	AddressKindUnknown:   addressKindUnknown,
	AddressKindHome:      addressKindHome,
	AddressKindOffice:    addressKindOffice,
	AddressKindPostalBox: addressKindPostalBox,
}

// AddressKindName -- map string to enum constant
var addressKindName = map[string]AddressKind{
	addressKindUnknown:   AddressKindUnknown,
	addressKindHome:      AddressKindHome,
	addressKindOffice:    AddressKindOffice,
	addressKindPostalBox: AddressKindPostalBox,
}

// NewAddressKind -- Create AddressKind instance from string representation
func NewAddressKind(k string) AddressKind {
	if kind, ok := addressKindName[k]; ok {
		return kind
	}
	return AddressKindUnknown
}

// String -- AddressKind
func (t AddressKind) String() string { return addressKindID[t] }

// MarshalJSON -- AddressKind
func (t AddressKind) MarshalJSON() ([]byte, error) {

	buffer := bytes.NewBufferString("\"")
	buffer.WriteString(addressKindID[t])
	buffer.WriteString("\"")
	return buffer.Bytes(), nil
}

// UnmarshalJSON -- AddressKind
func (t *AddressKind) UnmarshalJSON(b []byte) (err error) {

	var s string
	err = json.Unmarshal(b, &s)
	if err != nil {
		return err
	}
	*t = addressKindName[s]
	return nil
}
